---
#- debug:
#    var: "{{ item }}"
#  loop:
#    - ustreamer_h264_sink
#    - ustreamer_h264_sink_mode
#    - ustreamer_h264_sink_rm
#    - ustreamer_h264_bitrate

- name: check that the H264 variables are in a consistent state
  fail:
    msg: >-
      The H264 variables are in an inconsistent state. You must set the
      ustreamer_h264_sink variable in order to set other H264 variables.
  when: >-
    ustreamer_h264_sink == None
    and (ustreamer_h264_sink_mode != None
         or ustreamer_h264_sink_rm != None
         or ustreamer_h264_bitrate != None)

#- debug:
#    msg: ustreamer_h264_sink != None? {{ ustreamer_h264_sink != None }}

#- debug:
#    msg: ustreamer_h264_sink != ''? {{ ustreamer_h264_sink != '' }}

- name: determine whether to install Janus
  # When applying video settings changes via the `update-video-settings`
  # privileged script, we run this Ansible role with the `--tag systemd-config`
  # option. That triggers the `restart Janus` handler down the line, which
  # relies on the `ustreamer_install_janus` variable being set.
  tags:
    - janus
    - systemd-config
  set_fact:
    ustreamer_install_janus: "{{ ustreamer_h264_sink != None and ustreamer_h264_sink != '' }}"

- debug:
    var: ustreamer_install_janus

# If the `build uStreamer` step should be run with the `WITH_JANUS` option, we
# need to install the Janus Debian package beforehand, because it provides
# C-headers.
- name: install Janus Debian package
  apt:
    deb: "{{ ustreamer_janus_deb_file }}"
  tags:
    - janus
  when: ustreamer_install_janus

- name: create ustreamer group
  group:
    name: "{{ ustreamer_group }}"
    state: present

- name: create ustreamer user
  user:
    name: "{{ ustreamer_user }}"
    group: "{{ ustreamer_group }}"
    groups:
      - video
    system: yes
    create_home: yes

- name: check for a boot config file
  stat:
    path: /boot/config.txt
  register: boot_config_result

- name: save whether boot config file exists
  set_fact:
    boot_config_exists: "{{ boot_config_result.stat.exists }}"

- name: check whether this machine has a uStreamer settings file
  stat:
    path: "{{ ustreamer_settings_file }}"
  register: ustreamer_settings_file_result

- name: read saved settings
  import_tasks: check_saved_settings.yml
  when: ustreamer_settings_file_result.stat.exists | bool

- name: check if OS is Raspberry Pi OS
  set_fact:
    ustreamer_is_os_raspbian: "{{ ansible_lsb.id is defined and ansible_lsb.id == 'Raspbian' }}"

- name: check if OS supports OpenMAX IL acceleration (OMX)
  set_fact:
    ustreamer_os_supports_omx: "{{ ustreamer_is_os_raspbian and ((ansible_distribution_major_version | int) <= 10) }}"

- name: configure TC358743 HDMI capture chip
  import_tasks: provision_tc358743.yml
  when: ustreamer_capture_device == 'tc358743'

- name: uninstall TC358743 settings if they're not in use
  import_tasks: remove_tc358743.yml
  when: ustreamer_capture_device != 'tc358743'

- name: enable OpenMax IL acceleration (legacy)
  set_fact:
    ustreamer_compile_omx: >-
      {{ (ustreamer_encoder != None and ustreamer_encoder.lower() == 'omx') or
          (ustreamer_install_janus and ustreamer_os_supports_omx) }}

- name: check that OpenMax IL acceleration is only compiled on Raspberry Pi OS 10 (Buster) and earlier
  fail:
    msg: OpenMax IL acceleration (OMX) is only available on Raspberry Pi OS 10 (Buster) and earlier.
  when: ustreamer_compile_omx and not ustreamer_os_supports_omx

- name: collect universal required apt packages
  set_fact:
    ustreamer_packages:
      - build-essential
      - git
      - libevent-dev
      - libbsd-dev
      - uuid-dev

- name: collect Raspberry Pi OS specific required apt packages
  set_fact:
    ustreamer_packages: "{{ ustreamer_packages }} + ['libjpeg9-dev']"
  when: ustreamer_is_os_raspbian

- name: install libraspberrypi-dev if we're using OpenMax IL acceleration
  set_fact:
    ustreamer_packages: "{{ ustreamer_packages }} + ['libraspberrypi-dev']"
  when: ustreamer_compile_omx

- name: collect Debian-specific required apt packages
  set_fact:
    ustreamer_packages: "{{ ustreamer_packages }} + ['libjpeg62-turbo-dev']"
  when: ansible_distribution == 'Debian' and not ustreamer_is_os_raspbian

- name: collect Ubuntu-specific required apt packages
  set_fact:
    ustreamer_packages: "{{ ustreamer_packages }} + ['gcc', 'libjpeg8', 'libjpeg-dev', 'libjpeg-turbo8', 'libuuid1', 'libbsd0', 'make']"
  when: ansible_distribution == 'Ubuntu'

- name: collect Janus WebRTC plugin specific required apt packages
  set_fact:
    ustreamer_packages: "{{ ustreamer_packages }} + ['libglib2.0-dev', 'libjansson-dev']"
  when: ustreamer_install_janus

- name: install uStreamer pre-requisite packages
  apt:
    name: "{{ ustreamer_packages }}"
    state: present

- name: create uStreamer folder
  file:
    path: "{{ ustreamer_dir }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    recurse: yes
  tags:
    # This fails the idempotency test because it must run on every provision
    # to set the correct directory ownership that allows git to sync.
    # Issue: https://github.com/tiny-pilot/tinypilot/issues/963
    - molecule-idempotence-notest

- name: get uStreamer repo
  # Don't escalate privileges because only the directory owner can use git.
  # Issue: https://github.com/tiny-pilot/tinypilot/issues/963
  become: no
  git:
    repo: "{{ ustreamer_repo }}"
    dest: "{{ ustreamer_dir }}"
    version: "{{ ustreamer_repo_version }}"
  tags:
    # This fails the idempotency test because we're also skipping the
    # idempotency test on the previous task that allows git to sync.
    # Issue: https://github.com/tiny-pilot/tinypilot/issues/963
    - molecule-idempotence-notest

# We always need to clean & build uStreamer to ensure that the uStreamer service
# is in sync with its dependencies installed on the device.
# Issue: https://github.com/tiny-pilot/ansible-role-tinypilot/issues/174
- name: clean uStreamer repository
  make:
    chdir: "{{ ustreamer_dir }}"
    target: clean
  tags:
    - molecule-idempotence-notest

- name: build uStreamer
  make:
    chdir: "{{ ustreamer_dir }}"
    params:
      WITH_OMX: "{{ ustreamer_compile_omx | int }}"
      WITH_JANUS: "{{ ustreamer_install_janus | int }}"
  notify:
    - restart uStreamer
  tags:
    - molecule-idempotence-notest

- name: fix uStreamer folder permissions
  file:
    path: "{{ ustreamer_dir }}"
    state: directory
    owner: "{{ ustreamer_user }}"
    group: "{{ ustreamer_group }}"
    recurse: yes
  tags:
    - molecule-idempotence-notest

- name: install uStreamer as a service
  template:
    src: ustreamer.systemd.j2
    dest: /lib/systemd/system/ustreamer.service
    owner: root
    group: root
    mode: '0644'
  notify:
    - reload systemd config
    - restart uStreamer
    - restart Janus
  tags:
    - systemd-config

- name: enable systemd uStreamer service file
  systemd:
    name: ustreamer
    enabled: yes

- name: save uStreamer settings file
  template:
    src: config.yml.j2
    dest: "{{ ustreamer_settings_file }}"
    owner: "{{ ustreamer_user }}"
    group: "{{ ustreamer_group }}"
    mode: '0644'

- name: create uStreamer Janus plugin config
  template:
    src: janus.plugin.ustreamer.jcfg.j2
    dest: "{{ ustreamer_janus_install_dir }}/etc/janus/janus.plugin.ustreamer.jcfg"
  notify:
    - restart Janus
  tags:
    - janus
  when: ustreamer_install_janus

- name: install uStreamer Janus plugin
  copy:
    remote_src: yes
    # The `build uStreamer` step created and placed the `.so` file in case it
    # had been run with the `WITH_JANUS` option.
    src: "{{ ustreamer_dir }}/janus/libjanus_ustreamer.so"
    dest: "{{ ustreamer_janus_install_dir }}/lib/janus/plugins/"
  notify:
    - restart Janus
  tags:
    - janus
  when: ustreamer_install_janus
